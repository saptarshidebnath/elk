version: '3.2'

services:
  elasticsearch:
    container_name: ${COMPOSE_PROJECT_NAME}-elasticsearch
    build:
      context: elasticsearch/
      # Passes the ELK_VERSION from .env file
      args:
        ELK_VERSION: $ELK_VERSION
    # Loads the local config file to the given target path in the docker container
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
    # creates a docker volume on local machine, the data from container is stored here
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    # Exposes ports 9200 and 9300 
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      # ES_JAVA_OPTS: "-Xmx1024m -Xms512m"
      # remove the comment to the ELASTIC_PASSWORD argument to enable xpack 
      # ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    restart: unless-stopped  
    networks:
      - elk_net
    deploy: 
      resources:
        limits:
          memory: 1024M
  

  # logstash:
  #   build:
  #     context: logstash/
  #     args:
  #       ELK_VERSION: $ELK_VERSION
  #   volumes:
  #     - type: bind
  #       source: ./logstash/config/logstash.yml
  #       target: /usr/share/logstash/config/logstash.yml
  #       read_only: true
  #     - type: bind
  #       source: ./logstash/pipeline
  #       target: /usr/share/logstash/pipeline
  #       read_only: true
  #   ports:
  #     - "5000:5000/tcp"
  #     - "5000:5000/udp"
  #     - "9600:9600"
  #   environment:
  #     LS_JAVA_OPTS: "-Xmx256m -Xms256m"
  #   networks:
  #     - elk_net
  #   restart: unless-stopped
  #   depends_on:
  #     - elasticsearch
    # deploy: 
    #   resources:
    #     limits:
    #       memory: 64M


  kibana:
    container_name: ${COMPOSE_PROJECT_NAME}-kibana
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "${IP4_ADDR}:80:5601"
    restart: unless-stopped
    networks:
      - elk_net
    depends_on:
      - elasticsearch
    deploy: 
      resources:
        limits:
          memory: 256M

  filebeat:
    container_name: ${COMPOSE_PROJECT_NAME}-filebeat
    build:
      context: filebeat/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    user: root
    environment: 
      - 'strict.perms=false'
    restart: unless-stopped
    networks:
      - elk_net
    depends_on:
      - elasticsearch
    deploy: 
      resources:
        limits:
          memory: 64M
  
  metricbeat:
    container_name: ${COMPOSE_PROJECT_NAME}-metricbeat
    build:
      context: beats/metricbeat/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      # - "./beats/metricbeats/config/metricbeat.docker.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/proc:/hostfs/proc:ro"
      # - "/:/hostfs:ro"
    user: root
    restart: unless-stopped
    networks:
      - elk_net
    depends_on:
      - elasticsearch
    deploy: 
      resources:
        limits:
          memory: 64M  

networks:
  elk_net:
    name: elk_net
    driver: bridge

volumes:
  elasticsearch:
